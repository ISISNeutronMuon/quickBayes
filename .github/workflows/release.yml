name: Build and upload to PyPI

on:
  pull_request:
    #release:
    #types:
    #  - published

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # Note: builds on these are backward compatible
        # (Linux builds use manylinux Docker containers)
        # (macOS builds target old versions by default)
        os: [ubuntu-latest, windows-latest]

    steps:

      - uses: actions/checkout@v3
        with:
          fetch-depth: "0"

      - name: extract
        if: matrix.os == 'windows-latest'
        run: 7z x tools/vendored/mingw/MinGW64-4-6-1.7z

      - name: install fortran
        if: matrix.os == 'windows-latest'
        shell: bash -l {0}
        run:  |
             if [[ ${{ matrix.os }} == "windows-latest" ]]; then
                 setx path "%path%;C;\MinGW64\bin;"
                 #ls *
                 #echo "MinGW64/bin" >> $GITHUB_PATH
             fi

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.8.0
        # to supply options, put them in 'env', like:
        # env:
        #   CIBW_SOME_OPTION: value
        env:
          # List of platforms to build on
          CIBW_BUILD: cp38-manylinux_x86_64 cp38-win_amd64
          #CIBW_BUILD: cp38-macosx_x86_64 cp38-macosx_arm64

          # Install Eigen and pybind11 on manylinux images (no brew, need Eigen >= 3.4)
          CIBW_BEFORE_ALL_LINUX: >
             pip install numpy==1.16.*
             pip install cython>=0.29.32
             pip install scipy
          #   sudo apt install gfortran
          #   yum install -y wget &&
          #   wget https://gitlab.com/libeigen/eigen/-/archive/3.4.0/eigen-3.4.0.tar.gz &&
          #   tar xzf eigen-3.4.0.tar.gz &&
          #   cd eigen-3.4.0 &&
          #   mkdir build &&
          #   cd build &&
          #   cmake .. &&
          #   make install &&
          #   cd ../..
          # CIBW_BEFORE_BUILD_LINUX: pip install pybind11[global]

          # # Install Eigen and pybind11 on macOS
          # CIBW_BEFORE_ALL_MACOS: brew install eigen pybind11

          # # Install Eigen and pybind11 on Windows

          CIBW_BEFORE_BUILD_WINDOWS: >
            pip install numpy==1.16.*
            pip install cython>=0.29.32
            pip install scipy

          # # cibuildwheel doesn't yet ship a default repair command for Windows
          CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: "delvewheel repair -w {dest_dir} {wheel}"

          # # Install test dependencies and run tests
          CIBW_TEST_REQUIRES: numpy
          CIBW_TEST_COMMAND: >
            python {project}/test/qldata_test.py &&
            python {project}/test/four_python_test.py &&
            python {project}/test/Four_test.py
            # python {project}/test/qlres_test.py &&
            # python {project}/test/qlse_test.py &&

      - uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl

          #  build_sdist:
          #    name: Build source distribution
          #    runs-on: ubuntu-latest
          #    steps:
          #      - uses: actions/checkout@v3
          #
          #      - name: Build sdist
          #        run: pipx run build --sdist
          #
          #      - uses: actions/upload-artifact@v3
          #        with:
          #          path: dist/*.tar.gz
          #
          #upload_pypi:
          #  needs: [build_wheels, build_sdist]
          #  runs-on: ubuntu-latest
          #  # upload to PyPI on every tag starting with 'v'
          #  # if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
          #  # alternatively, to publish when a GitHub Release is created, use the following rule:
          #  if: github.event_name == 'release' && github.event.action == 'published'
          #  steps:
          #    - uses: actions/download-artifact@v3
          #      with:
          #        name: artifact
          #        path: dist

          #    - uses: pypa/gh-action-pypi-publish@v1.5.0
          #      with:
          #        user: __token__
          #        password: ${{ secrets.pypi_password }}
          #        # To test: repository_url: https://test.pypi.org/legacy/
